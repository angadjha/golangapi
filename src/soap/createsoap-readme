Sure, here's a more detailed Wiki page content on calling SOAP services in Golang with a comprehensive example:

---

# Calling SOAP Services in Golang

## Introduction

This guide demonstrates how to call a SOAP (Simple Object Access Protocol) service using the Go programming language (Golang). SOAP is a protocol that allows for structured communication between web services. Golang, a statically typed and compiled language, provides excellent support for making HTTP requests and processing XML data, making it a suitable choice for interacting with SOAP services.

In this tutorial, we'll outline the steps to create a SOAP request, send it to a SOAP service, and handle the response using Golang.

## Prerequisites

Before proceeding, ensure that you have the following prerequisites installed on your system:

- **Go Programming Language**: Make sure you have Go installed. If not, visit the official [Go website](https://golang.org/) for instructions on installing Go.
- **Golang Packages**: Install the necessary Go packages using the following commands:
  ```bash
  go get github.com/parnurzeal/gorequest
  go get github.com/beevik/etree
  ```

## Creating a SOAP Request

To interact with a SOAP service, you need to create a valid SOAP request. A SOAP request typically follows a structure involving an envelope, body, namespace, and parameters:

- **Envelope**: The root element of a SOAP message.
- **Body**: Contains the main content of the request, including the specific operation to perform.
- **Namespace**: Defines the SOAP namespace for the request.
- **Parameters**: Provide the necessary parameters for the SOAP operation.

Here's a sample SOAP request:

```xml
<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
    <soap:Body>
        <YourSOAPRequest xmlns="http://example.com/">
            <Param1>Value1</Param1>
            <Param2>Value2</Param2>
        </YourSOAPRequest>
    </soap:Body>
</soap:Envelope>
```

Replace `YourSOAPRequest`, `Param1`, `Param2`, and the namespace with the appropriate values for your SOAP service.

## Sending the SOAP Request

Next, you'll send the SOAP request to the SOAP service's endpoint using an HTTP client in Go. Follow this example to achieve this:

```go
package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"net/http"
)

func main() {
	// SOAP request body as a string
	soapRequest := `
		<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
			<soap:Body>
				<YourSOAPRequest xmlns="http://example.com/">
					<Param1>Value1</Param1>
					<Param2>Value2</Param2>
				</YourSOAPRequest>
			</soap:Body>
		</soap:Envelope>
	`

	// URL of the SOAP service endpoint
	endpointURL := "http://example.com/soap-endpoint"

	// Create an HTTP request
	req, err := http.NewRequest("POST", endpointURL, bytes.NewBufferString(soapRequest))
	if err != nil {
		fmt.Println("Error creating request:", err)
		return
	}

	// Set SOAP headers and content type
	req.Header.Set("Content-Type", "text/xml; charset=utf-8")
	req.Header.Set("SOAPAction", "YourSOAPAction")

	// Send the HTTP request
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Error sending request:", err)
		return
	}
	defer resp.Body.Close()

	// Read the response
	responseBody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("Error reading response:", err)
		return
	}

	// Print the SOAP response
	fmt.Println("SOAP Response:", string(responseBody))
}
```

Replace `YourSOAPRequest`, `Param1`, `Param2`, `http://example.com/`, and `http://example.com/soap-endpoint` with the specific values and endpoint URL for your SOAP service.

## Handling Errors

Ensure to handle errors gracefully, check the response status code, and process the SOAP response according to your application's requirements.

## Conclusion

In this guide, you learned how to call a SOAP service in Go by creating a SOAP request and sending it to the service's endpoint. This enables you to interact with SOAP-based web services using the Go programming language.

---

Feel free to utilize and modify this content for your Wiki page, making adjustments as needed to suit your specific use case or SOAP service details.