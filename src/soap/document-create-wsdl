When you need to add header details in a SOAP request, including a Security Username Token for authentication, you'll typically include those headers as part of the SOAP envelope. The exact structure of these headers can vary depending on the SOAP service's requirements, but I'll provide you with a general example.

Here's how you can modify the SOAP request example to include a Security Username Token in the header:

```go
package main

import (
	"bytes"
	"encoding/xml"
	"fmt"
	"net/http"
)

// Define the SOAP envelope and header structures
type SOAPEnvelope struct {
	XMLName xml.Name `xml:"SOAP-ENV:Envelope"`
	Header  SOAPHeader
	Body    SOAPBody
}

type SOAPHeader struct {
	XMLName           xml.Name `xml:"SOAP-ENV:Header"`
	SecurityHeader    SecurityHeader
}

type SecurityHeader struct {
	XMLName      xml.Name `xml:"wsse:Security"`
	UsernameToken UsernameToken
}

type UsernameToken struct {
	XMLName  xml.Name `xml:"wsse:UsernameToken"`
	Username string   `xml:"wsse:Username"`
	Password string   `xml:"wsse:Password"`
}

type SOAPBody struct {
	XMLName       xml.Name `xml:"SOAP-ENV:Body"`
	GetUserRequest GetUserRequest
}

type GetUserRequest struct {
	XMLName xml.Name `xml:"ns1:GetUserRequest"`
	UserID  int      `xml:"ns1:UserID"`
}

func main() {
	// Create a SOAP envelope with the GetUserRequest and Security headers
	envelope := SOAPEnvelope{
		Header: SOAPHeader{
			SecurityHeader: SecurityHeader{
				UsernameToken: UsernameToken{
					Username: "your_username",
					Password: "your_password",
				},
			},
		},
		Body: SOAPBody{
			GetUserRequest: GetUserRequest{
				UserID: 123,
			},
		},
	}

	// Marshal the SOAP envelope to XML
	requestBody, err := xml.Marshal(envelope)
	if err != nil {
		fmt.Println("Error marshalling SOAP request:", err)
		return
	}

	// Make the SOAP API call
	endpointURL := "http://example.com/soap-endpoint"
	resp, err := http.Post(endpointURL, "text/xml", bytes.NewBuffer(requestBody))
	if err != nil {
		fmt.Println("Error making SOAP API call:", err)
		return
	}
	defer resp.Body.Close()

	// Parse the SOAP response into the GetUserResponse struct
	var responseEnvelope SOAPEnvelope
	err = xml.NewDecoder(resp.Body).Decode(&responseEnvelope)
	if err != nil {
		fmt.Println("Error decoding SOAP response:", err)
		return
	}

	// Access the GetUserResponse from the SOAP response
	getUserResponse := responseEnvelope.Body.GetUserRequest

	// Print the response
	fmt.Println("User Name:", getUserResponse.UserName)
	fmt.Println("User Email:", getUserResponse.UserEmail)
}
```

In this example, we added the Security Username Token to the SOAP header. Modify the `Username` and `Password` fields in the `UsernameToken` struct with the appropriate values for your authentication.

Please note that the exact structure and authentication method may vary depending on the specific SOAP service you're interacting with, so make sure to follow their documentation and requirements.