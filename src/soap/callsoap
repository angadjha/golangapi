To call a SOAP service using Golang, you'll need to create a SOAP request and send it to the SOAP endpoint using an HTTP client. Here's a general outline of how you can achieve this:

1. **Install necessary packages**:
   
   Install the required Go packages to make HTTP requests and work with XML.

   ```bash
   go get github.com/parnurzeal/gorequest
   go get github.com/beevik/etree
   ```

2. **Create a SOAP request**:

   Build an XML SOAP request according to the specifications of the SOAP service you're interacting with.

3. **Send the SOAP request**:

   Use an HTTP client to send the SOAP request to the SOAP service's endpoint.

Here's a simple example:

```go
package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"net/http"
)

func main() {
	// SOAP request body as a string
	soapRequest := `
		<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
			<soap:Body>
				<YourSOAPRequest xmlns="http://example.com/">
					<Param1>Value1</Param1>
					<Param2>Value2</Param2>
				</YourSOAPRequest>
			</soap:Body>
		</soap:Envelope>
	`

	// URL of the SOAP service endpoint
	endpointURL := "http://example.com/soap-endpoint"

	// Create an HTTP request
	req, err := http.NewRequest("POST", endpointURL, bytes.NewBufferString(soapRequest))
	if err != nil {
		fmt.Println("Error creating request:", err)
		return
	}

	// Set SOAP headers and content type
	req.Header.Set("Content-Type", "text/xml; charset=utf-8")
	req.Header.Set("SOAPAction", "YourSOAPAction")

	// Send the HTTP request
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Error sending request:", err)
		return
	}
	defer resp.Body.Close()

	// Read the response
	responseBody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("Error reading response:", err)
		return
	}

	// Print the SOAP response
	fmt.Println("SOAP Response:", string(responseBody))
}
```

Replace `YourSOAPRequest`, `Param1`, `Param2`, `http://example.com/`, and `http://example.com/soap-endpoint` with the appropriate values for your SOAP service.

Make sure to handle errors and check the response status code and body according to your application's requirements. Additionally, adjust the SOAP request structure and content according to the specific SOAP service you're interacting with.